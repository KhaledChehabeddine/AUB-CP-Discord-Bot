DataBase = {'00001': {'algo': 'binary-search-tree', 'lang_zip': {'cpp': False, 'java': False}}, '00002': {'algo': 'breadth-first-search', 'lang_zip': {'cpp': False}}, '00003': {'algo': 'closest-pair', 'lang_zip': {'cpp': False}}, '00004': {'algo': 'depth-first-search', 'lang_zip': {'cpp': False}}, '00005': {'algo': 'disjoint-set-union', 'lang_zip': {'cpp': False}}, '00006': {'algo': 'doubly-linked-list', 'lang_zip': {'java': False}}, '00007': {'algo': 'heap-priority-queue', 'lang_zip': {'java': False}}, '00008': {'algo': 'linked-binary-tree', 'lang_zip': {'java': False}}, '00009': {'algo': 'priority-queue', 'lang_zip': {'java': False}}, '00010': {'algo': 'singly-linked-list', 'lang_zip': {'java': False}}, '00011': {'algo': 'gcd-lcm', 'lang_zip': {'cpp': False}}, '00012': {'algo': 'mod-pow', 'lang_zip': {'cpp': False}}, '00013': {'algo': 'sieve-divisors', 'lang_zip': {'cpp': False}}, '00014': {'algo': 'sieve-primes', 'lang_zip': {'cpp': False}}, '00015': {'algo': 'miller-rabin', 'lang_zip': {'cpp': False}}, '00016': {'algo': 'big-int', 'lang_zip': {'cpp': False}}}

Mapping = {'00011': ['nb-theory'], '00012': ['nb-theory'], '00013': ['nb-theory'], '00014': ['nb-theory'], '00001': ['bst'], '00002': ['bfs', 'graph'], '00004': ['dfs', 'graph'], '00005': ['dsu', 'graph'], '00015': ['nb-theory'], '00016': ['classes']}

Inverse = {'binary-search-tree': '00001', 'breadth-first-search': '00002', 'closest-pair': '00003', 'depth-first-search': '00004', 'disjoint-set-union': '00005', 'doubly-linked-list': '00006', 'heap-priority-queue': '00007', 'linked-binary-tree': '00008', 'priority-queue': '00009', 'singly-linked-list': '00010', 'gcd-lcm': '00011', 'mod-pow': '00012', 'sieve-divisors': '00013', 'sieve-primes': '00014', 'miller-rabin': '00015', 'big-int': '00016'}